var DomRender = (function () {
    function DomRender(dom, Animation) {
        this.target = dom;
        var position = '';
        position = window.getComputedStyle(this.target, null).position;
        this.target.style.position =
            position == 'relative' ? 'relative' : 'absolute';
        this.Animation = Animation;
        this.init();
    }
    DomRender.install = function (mot) {
        this.mot = mot;
        mot.register('dom', function (dom, Animation) {
            return new DomRender(dom, Animation);
        });
    };
    DomRender.prototype.init = function () {
        this.originTransform = this.getOriginStyleTransform(this.target);
        this.originTransitionProperty = [];
        var animations = this.Animation.actions;
        this.taskQueue = animations.children || [];
        this.initStyle(this.taskQueue);
    };
    DomRender.prototype.update = function (transform, transitionProperty) {
        if (transform !== null) {
            this.originTransform = this.splitStyleToArray(transform);
        }
        if (transitionProperty !== null) {
            this.originTransitionProperty =
                this.splitTransitionPropertyToArray(transitionProperty);
        }
    };
    DomRender.prototype.getOriginStyleTransform = function (element) {
        var transform = element.style.transform;
        transform =
            transform === '' ?
                window.getComputedStyle(element, null).transform :
                transform;
        if (transform === '' || transform === null || transform === 'none') {
            return [];
        }
        return this.splitStyleToArray(transform);
    };
    DomRender.prototype.initStyle = function (taskQueue) {
        var _this = this;
        var ifInitMove = false;
        var moveInit = function () {
            _this.target.style.left =
                window.getComputedStyle(_this.target, null).left || '0px';
            _this.target.style.top =
                window.getComputedStyle(_this.target, null).top || '0px';
        };
        for (var i = 0, l = taskQueue.length; i < l; i++) {
            var item = taskQueue[i];
            if (item.type === 'group') {
                var ifHasMoveAction = item.children.findIndex(function (item) { return item.action === 'move'; }) !== -1;
                !ifInitMove && ifHasMoveAction && moveInit();
                ifInitMove = true;
            }
            else {
                if (item.action === 'move') {
                    !ifInitMove && moveInit();
                    ifInitMove = true;
                }
            }
        }
    };
    DomRender.prototype.render = function () {
        var _this = this;
        DomRender.mot.emit('domRenderBeforeRender', this);
        var waitingList = this.getStyleFromTaskQueue(this.taskQueue);
        var len = waitingList.length;
        var index = 0;
        var next = function (item, time) {
            if (time === void 0) { time = -1; }
            var done = function () {
                var style = item.style;
                for (var attr in style) {
                    _this.target.style[attr] = style[attr];
                }
                index++;
                if (index < len) {
                    next(waitingList[index], index === 0 ? 0 : waitingList[index - 1].duration);
                }
            };
            if (time === -1) {
                done();
            }
            else if (time === -2) {
                requestAnimationFrame(function () {
                    done();
                });
            }
            else {
                setTimeout(function () {
                    done();
                }, time);
            }
        };
        setTimeout(function () {
            next(waitingList[0]);
        }, 0);
    };
    DomRender.prototype.renderStatusOn = function (item) {
        if (item.status &&
            item.status.type === 'rotate' &&
            item.status.description !== '') {
            var name_1 = "rotate" + new Date().getTime();
            var startTransform = void 0;
            var endTransform = void 0;
            var direction = item.status.description.split(',')[0].trim();
            var params = item.status.description.split(',')[1].trim();
            if (direction === 'x' || direction === 'X') {
                startTransform = "rotateX(0)";
                endTransform = "rotateX(360deg)";
            }
            if (direction === 'y' || direction === 'Y') {
                startTransform = "rotateY(0)";
                endTransform = "rotateY(360deg)";
            }
            if (direction === 'z' || direction === 'Z') {
                startTransform = "rotateZ(0)";
                endTransform = "rotateZ(360deg)";
            }
            this.insertKeyFrame("@keyframes " + name_1 + " {\n          from {transform:" + startTransform + ";}\n          to {transform:" + endTransform + ";\n          transform-origin:" + item.status.transformOrigin + "}}\n        }");
            var className = "mot-class-rotate-" + new Date().getTime();
            this.addStylesheetRules([
                ['.' + className, ['animation', name_1 + " " + params]],
            ]);
            this.addClassName(this.target, className);
        }
        if (item.status &&
            item.status.type === 'scale' &&
            item.status.description !== '') {
            var name_2 = "scale" + new Date().getTime();
            var direction = item.status.description.split(',')[0].trim();
            var startDirectionX = direction.split('|')[0];
            var startDirectionY = direction.split('|')[1];
            var endDirectionX = direction.split('|')[2];
            var endDirectionY = direction.split('|')[3];
            var params = item.status.description.split(',')[1].trim();
            var startTransform = "scale(" + startDirectionX + "," + startDirectionY + ")";
            var endTransform = "scale(" + endDirectionX + "," + endDirectionY + ")";
            this.insertKeyFrame("@keyframes " + name_2 + " {\n        from {transform:" + startTransform + ";\n        transform-origin:" + item.status.transformOrigin + "}\n        to {transform:" + endTransform + ";\n        transform-origin:" + item.status.transformOrigin + "}\n      }");
            var className = "mot-class-scale-" + new Date().getTime();
            this.addStylesheetRules([
                ['.' + className, ['animation', name_2 + " " + params]],
            ]);
            this.addClassName(this.target, className);
        }
    };
    DomRender.prototype.renderStatusOff = function (item) {
        var _this = this;
        var type = item.status.type;
        var r = this.target.className
            .split(' ')
            .filter(function (item) { return item.indexOf("mot-class-" + type) !== -1; });
        r.forEach(function (item) {
            _this.removeClassName(_this.target, item);
        });
    };
    DomRender.prototype.mergeTransForm = function (origin, newStyle) {
        var newStyleArray = this.splitStyleToArray(newStyle);
        var transformStyle = newStyle;
        origin.forEach(function (item) {
            var ifHasSameTransform = false;
            for (var i = 0, l = newStyleArray.length; i < l; i++) {
                if (item[0][0] == newStyleArray[i][0][0]) {
                    ifHasSameTransform = true;
                    break;
                }
            }
            if (!ifHasSameTransform) {
                transformStyle = transformStyle + (" " + item[0] + "(" + item[1] + ")");
            }
        });
        return transformStyle;
    };
    DomRender.prototype.mergeTransitionProperty = function (origin, newProperty) {
        var newPropertyArray = this.splitTransitionPropertyToArray(newProperty);
        var transitionProperty = newProperty;
        origin.forEach(function (item) {
            if (!newPropertyArray.includes(item)) {
                transitionProperty = transitionProperty + ',' + item;
            }
        });
        return transitionProperty;
    };
    DomRender.prototype.getStyleFromTaskQueue = function (taskQueue) {
        var _this = this;
        var styleArray = [];
        taskQueue.forEach(function (item) {
            if (item.type == 'group') {
                item.children.forEach(function (child) {
                    child.duration = item.duration;
                    styleArray.push({ style: _this.transferAction(child), duration: -1 });
                });
                styleArray.push({ style: {}, duration: item.duration });
            }
            else if (item.action == 'wait') {
                styleArray.push({ style: {}, duration: item.time });
            }
            else if (item.action == 'statusOn' || item.action == 'statusOff') {
                styleArray.push({
                    style: {},
                    duration: item.duration,
                    status: item.action,
                });
            }
            else if (item.action === 'path') {
                item.points.forEach(function (point) {
                    styleArray.push({
                        style: { left: point.x + "px", top: point.y + "px" },
                        duration: -2,
                    });
                });
            }
            else {
                styleArray.push({
                    style: _this.transferAction(item),
                    duration: item.duration,
                });
            }
        });
        return styleArray;
    };
    DomRender.prototype.transferAction = function (item) {
        var TYPE_MAP = {
            translate: this.translate,
            rotate: this.rotate,
            scale: this.scale,
            attribute: this.attribute,
            move: this.move,
            keyframe: this.keyframe,
        };
        return TYPE_MAP[item.action].bind(this)(item);
    };
    DomRender.prototype.translate = function (params) {
        var transform = params.z !== undefined ?
            "translate3d(" + params.x + "," + params.y + ")" :
            "translate(" + params.x + "," + params.y + "," + params.z + ")";
        var transitionDuration = params.duration + "ms";
        var transitionTimingFunction = "" + params.timeFunction;
        var transitionProperty = "transform";
        transform = this.mergeTransForm(this.originTransform, transform);
        transitionProperty = this.mergeTransitionProperty(this.originTransitionProperty, transitionProperty);
        this.update(transform, transitionProperty);
        return {
            transform: transform,
            transitionDuration: transitionDuration,
            transitionTimingFunction: transitionTimingFunction,
            transitionProperty: transitionProperty,
        };
    };
    DomRender.prototype.move = function (params) {
        var left = "" + (Number(params.x) ? params.x + 'px' : params.x);
        var top = "" + (Number(params.y) ? params.y + 'px' : params.y);
        var transitionDuration = params.duration + "ms";
        var transitionTimingFunction = "" + params.timeFunction;
        var transitionProperty = "left,top";
        transitionProperty = this.mergeTransitionProperty(this.originTransitionProperty, transitionProperty);
        this.update(null, transitionProperty);
        return {
            left: left,
            top: top,
            transitionDuration: transitionDuration,
            transitionTimingFunction: transitionTimingFunction,
            transitionProperty: transitionProperty,
        };
    };
    DomRender.prototype.scale = function (params) {
        var transform = params.z !== undefined ?
            "scale3d(" + params.x + "," + params.y + "," + params.z + ")" :
            "scale(" + params.x + "," + params.y + ")";
        var transitionDuration = params.duration + "ms";
        var transitionTimingFunction = "" + params.timeFunction;
        var transformOrigin = "" + params.transformOrigin;
        var transitionProperty = "transform";
        transform = this.mergeTransForm(this.originTransform, transform);
        transitionProperty = this.mergeTransitionProperty(this.originTransitionProperty, transitionProperty);
        this.update(transform, transitionProperty);
        return {
            transform: transform,
            transitionDuration: transitionDuration,
            transitionTimingFunction: transitionTimingFunction,
            transitionProperty: transitionProperty,
            transformOrigin: transformOrigin,
        };
    };
    DomRender.prototype.rotate = function (params) {
        var transform = params.x !== undefined || params.y !== undefined ?
            "rotate3d(" + params.x + "deg," + params.y + "deg," + params.z + "deg)" :
            "rotate(" + params.z + "deg)";
        var transitionDuration = params.duration + "ms";
        var transitionTimingFunction = "" + params.timeFunction;
        var transformOrigin = "" + params.transformOrigin;
        var transitionProperty = "transform";
        transform = this.mergeTransForm(this.originTransform, transform);
        transitionProperty = this.mergeTransitionProperty(this.originTransitionProperty, transitionProperty);
        this.update(transform, transitionProperty);
        return {
            transform: transform,
            transformOrigin: transformOrigin,
            transitionDuration: transitionDuration,
            transitionTimingFunction: transitionTimingFunction,
            transitionProperty: transitionProperty,
        };
    };
    DomRender.prototype.attribute = function (params) {
        var _a;
        var transitionDuration = params.duration + "ms";
        var transitionTimingFunction = "" + params.timeFunction;
        var transitionProperty = "" + this.humpParse(params.key);
        transitionProperty = this.mergeTransitionProperty(this.originTransitionProperty, transitionProperty);
        this.update(null, transitionProperty);
        return _a = {},
            _a[params.key] = params.value,
            _a.transitionDuration = transitionDuration,
            _a.transitionTimingFunction = transitionTimingFunction,
            _a.transitionProperty = transitionProperty,
            _a;
    };
    DomRender.prototype.keyframe = function (params) {
        var _this = this;
        console.log(params);
        var keyframeString = '';
        params.keyframe.forEach(function (item) {
            var temp = '';
            var actions = '';
            for (var key in item.action) {
                actions += _this.humpParse(key) + ":" + item.action[key] + ";";
            }
            temp = item.process + " {" + actions + "}";
            keyframeString += temp;
        });
        console.log(keyframeString);
        this.insertKeyFrame("@keyframes obiusm-" + params.uid + " {" + keyframeString + "}");
        var className = "obiusm-class-" + params.uid;
        this.addStylesheetRules([
            ['.' + className, [
                    'animation',
                    "obiusm-" + params.uid + " \n        " + params.duration + " \n        " + params.timeFunction + " \n        " + params.delay + "\n        " + params.iterationCount + "\n        " + params.direction + " \n        " + params.fillMode + "\n        ",
                ],
            ],
        ]);
        this.addClassName(this.target, className);
    };
    DomRender.prototype.humpParse = function (s) {
        var reg = /([a-z]+)|([A-Z]{1}[a-z]+)/g;
        var r = s.match(reg);
        var attr = '';
        r.forEach(function (e, index) {
            if (index === 0) {
                attr = e;
            }
            else {
                e = e.toLowerCase();
                attr = attr + '-' + e;
            }
        });
        return attr;
    };
    DomRender.prototype.splitStyleToArray = function (styleString) {
        var transformArray = styleString.match(/[a-zA-Z]+\s*?\(.*?\)/gms);
        return transformArray.map(function (item) {
            try {
                var KEY_REG = /([a-zA-Z]*?)\(/;
                var VALUE_REG = /\((.*)\)/;
                return [[item.match(KEY_REG)[1]], item.match(VALUE_REG)[1]];
            }
            catch (error) {
                throw new Error('There is something wrong with transform style');
            }
        });
    };
    DomRender.prototype.splitTransitionPropertyToArray = function (property) {
        var array = property
            .split(',')
            .filter(function (item) { return item !== '' || item !== undefined; });
        return array;
    };
    DomRender.prototype.addStylesheetRules = function (decls) {
        var style = document.createElement('style');
        document.getElementsByTagName('head')[0].appendChild(style);
        if (!window.createPopup) {
            style.appendChild(document.createTextNode(''));
        }
        var s = document.styleSheets[document.styleSheets.length - 1];
        for (var i = 0, dl = decls.length; i < dl; i++) {
            var j = 1;
            var decl = decls[i];
            var selector = decl[0];
            console.log('selector', selector);
            var rulesStr = '';
            if (Object.prototype.toString.call(decl[1][0]) === '[object Array]') {
                decl = decl[1];
                j = 0;
            }
            for (var rl = decl.length; j < rl; j++) {
                var rule = decl[j];
                rulesStr +=
                    rule[0] + ':' + rule[1] + (rule[2] ? ' !important' : '') + ';\n';
            }
            if (s.insertRule) {
                s.insertRule(selector + '{' + rulesStr + '}', s.cssRules.length);
            }
            else {
                s.addRule(selector, rulesStr, -1);
            }
        }
    };
    DomRender.prototype.insertKeyFrame = function (keyframe) {
        try {
            var style = document.createElement('style');
            style.innerHTML = keyframe;
            document.getElementsByTagName('head')[0].appendChild(style);
        }
        catch (err) {
            console.error("insertKeyFrame error", err);
        }
    };
    DomRender.prototype.addClassName = function (dom, className) {
        var c = dom.className;
        c = c + " " + className;
        dom.className = c;
    };
    DomRender.prototype.removeClassName = function (dom, className) {
        var c = dom.className;
        c = c.replace(className, '');
        dom.className = c;
    };
    DomRender.pluginName = 'DomRender';
    DomRender.installed = false;
    return DomRender;
}());

export { DomRender as default };
